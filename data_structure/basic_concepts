数据(data) 是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中的，并且能被计算机程序处理的符号的总称。 数据可分为两大类：一类是数值数据，包括整数、实数等；另一个类是非数值数据，包括图形、图像、声音、文字等。

数据元素(data element) 是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。

有时，一个数据元素可由若干个数据项(data item)组成，数据项是构成数据元素的不可分割的最小单位。

数据对象(data object)是性质相同的数据元素的集合，是数据的一个子集。

数据结构(data structure)是指相互之间存在一定关系的数据元素的集合。依据角度不同，可分为逻辑结构和存储结构。

数据的逻辑结构(logical structure)是指数据元素之间逻辑关系的整体。所谓逻辑关系是指数据元素之间的关联方式或邻接关系。

根据数据元素之间的逻辑关系的不同，数据结构可分为4类：集合(Set)、线性结构(List)、树结构(Tree)、图结构(Graph)。

数据的逻辑结构，是从面向问题的角度出发的，反映了数据内部的构成方式，常常将数据的逻辑结构称为数据结构。

数据的存储结构(storage structure)是数据结构在计算机中的映像，又称为物理结构，是数据及其逻辑结构在计算机中的表示。

存储结构除了存储数据之外，必须隐式或显式地存储数据之间的逻辑关系，通常有两种存储结构：顺序存储结构和链式存储结构。

顺序存储结构的基本思想：用一组连续的存储单元依次存储数据元素，数据元素之间的逻辑关系是由元素的存储位置来表示的。

链式存储结构的基本思想：用一组任意的存储单元存储数据元素，数据元素之间的逻辑关系是用指针来表示的。

数据类型(data type)是一个值的集合和定义在这个值集上的一组操作的总称。数据类型显式或隐式地规定了程序执行期间变量或表达式所有可能取值的范围，以及在这些值上允许进行的操作。

抽象数据类型(Abstract Data Type, ADT)是一个数据结构以及定义在该结构上的一组操作的总称。它是对数据类型的抽象，抽象的意义在于数据类型不是高级程序语言支持的基本数据类型，而是自定义的数据类型。

抽象数据类型(ADT)的定义和实现通常是分开的。定义只包含数据逻辑结构的定义和所允许的一组操作；使用者通过这些定义了的操作对ADT进行操作；另一方面，实现者根据这些定义来完成ADT的各种具体实现方式。

对抽象数据类型的定义，不涉及实现细节，形式上可繁可简，比如，可采用如下形式:
ADT 抽象数据类型名
Data
    数据元素之间的逻辑关系的定义
Operation
    操作1:
      前置条件:执行此操作前数据所必须的状态
      输入: 执行此操作所需要的输入
      功能: 该操作将完成的功能
      输出: 此操作执行完成后产生的输出
      后置条件: 执行此操作后数据的状态
    操作2:
      .
      .
      .
    操作n:
      .
      .
      .
endADT

参考书目:
[1] 数据结构(C语言版) . 严蔚敏, 吴伟民 . 清华大学出版社
[2] 数据结构(C++版) . 王红梅, 胡明, 王涛 . 清华大学出版社
